@using Microsoft.AspNetCore.Components
@using Themenschaedel.Shared.Models
@using System.ComponentModel.DataAnnotations
@using Themenschaedel.Shared.Models.Request
<div>
    <EditForm class="topic-view-card container" Model="@Topic">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="topic-view-card-title item-big-space">
            Name: <InputText id="name" @bind-Value="Topic.Name" />
        </div>

        <div class="topic-view-card-times item">
            Start: <InputText placeholder="00:00:00" id="start" @bind-Value="StartTimeProxy" />
            <br />
            End: <InputText placeholder="00:00:00" id="end" @bind-Value="EndTimeProxy" />
        </div>

        <div class="item">
            Webung? <InputCheckbox id="ad" @bind-Value="Topic.Ad" />
            <br />
            Community Thema? <InputCheckbox id="community_topic" @bind-Value="Topic.CommunityContributed" />
        </div>

        <div class="item-small-space">
            <ChipsInput Chips="@Subtopics"
                        OnChipsChanged="SubtopicChanged"
                        EnableBackspaceRemove="false"
                        ShowValidationErrors="true"
                        AllowEmptyValue="false"
                        AllowEmptyValueValidationMessage="No empty values are allowed" />
        </div>
        <div class="item">
            <button @onclick="DeleteTopic" type="button" class="default-button"><i class="ti ti-trash"></i>Remove Topic</button>
        </div>
    </EditForm>
</div>


@code {

    [Parameter]
    [Required]
    public TopicPostRequestClient Topic { get; set; }

    [Parameter]
    public EventCallback<TopicPostRequestClient> RemoveTopic { get; set; }

    [Inject]
    protected IToastService _toastService { get; set; }

    private List<string> Subtopics
    {
        get { return GetSubtopics(); }
        set { SubtopicChanged(value); }
    }

    protected string StartTimeProxy
    {
        get => Topic.GetFullStartTimestamp();
        set
        {
            bool worked = Topic.SetStartFromString(value);
            if (!worked) _toastService.ShowError("Start time is wrong!");
        }
    }

    protected string EndTimeProxy
    {
        get => Topic.GetFullEndTimestamp();
        set
        {
            bool worked = Topic.SetEndFromString(value);
            if (!worked) _toastService.ShowError("End time is wrong!");
        }
    }

    private List<string> GetSubtopics()
    {
        List<string> subtopics = new List<string>();
        for (int i = 0; i < this.Topic.Subtopics.Count; i++)
        {
            subtopics.Add(this.Topic.Subtopics[i].Name);
        }
        return subtopics;
    }

    protected async Task DeleteTopic()
    {
        await RemoveTopic.InvokeAsync(Topic);
        Topic = new TopicPostRequestClient();
    }

    protected void SubtopicChanged(List<string> subtopics)
    {
        List<SubtopicPostRequest> subtopicPostRequest = new List<SubtopicPostRequest>();
        for (int i = 0; i < subtopics.Count; i++)
        {
            subtopicPostRequest.Add(new SubtopicPostRequest()
            {
                Name = subtopics[i]
            });
        }
        this.Topic.Subtopics = subtopicPostRequest;
    }
}