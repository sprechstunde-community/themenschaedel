@page "/Episode/{Id:int}"
@using Themenschaedel.Web.Services.Interfaces
@using Humanizer
@using Ganss.XSS
@using Themenschaedel.Shared.Models
@using System.Timers
@using Themenschaedel.Shared.Models.Response
@inject NavigationManager _navigation;

<!-- thanks https://pavellaptev.medium.com/css-weekly-2-an-image-on-the-left-text-on-the-left-a5e59b2acdb5 -->
<div class="episode-container">
    <div class="episode-container__container">
        <img class="episode-container__image" src="@episode.Image">
        <div class="episode-container__text">
            <EpisodePills ClaimStatus=@episode.ClaimStatus StatusStyle="EpisodePills.Style.Default"></EpisodePills>
            <h2>@episode.Title</h2>
            @((MarkupString)sanitizedDescription)

            <br />
            <p>Length: @TimeSpan.FromSeconds(episode.Duration).Humanize(3, countEmptyUnits: true)</p>
        </div>
        @if (isLoggedIn && episode.ClaimStatus == EpisodeClaimStatus.not_claimed)
        {
            <button class="default-button" @onclick="ClaimEpisode"><i class="ti ti-bookmark"></i>Claim Episode</button>
        }
    </div>
    @if (isAdmin)
    {
        @if (episode.ClaimStatus == EpisodeClaimStatus.done)
        {
            <button class="default-button" @onclick="UnverifyEpisode"><i class="ti ti-circle-minus"></i>Unverify Episode</button>
        }
        @if (episode.ClaimStatus == EpisodeClaimStatus.claimed)
        {
            <button class="default-button" @onclick="UnclaimEpisode"><i class="ti ti-trash"></i>Unclaim Episode</button>
        }
    }
    @if (episode.ClaimStatus == EpisodeClaimStatus.done)
    {
        <hr />
    }
    @if (isEditing && isLoggedIn)
    {
        <button class="default-button" @onclick="RefreshEpisode"><i class="ti ti-refresh"></i>Refresh</button>
        <TopicEdit episodeId=@Id episode=episode FinalizeTopic="FinalizeTopic"></TopicEdit>
    }
    else if (episode.ClaimStatus == EpisodeClaimStatus.done)
    {
        <TopicView episodeId=@Id episode=episode></TopicView>
    }
    else if (isVerifying)
    {
        <button class="default-button" @onclick="VerifyEpisode"><i class="ti ti-circle-check"></i>Verify Episode</button>
        <TopicView episodeId=@Id episode=episode></TopicView>
    }
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    [Inject]
    private IData _data { get; set; }

    [Inject]
    private IUserSession _session { get; set; }

    [Inject]
    private IRefresher _refresh { get; set; }

    [Inject]
    private IToastService _toast { get; set; }

    public EpisodeClientExtra episode = new EpisodeClientExtra();

    public static string sanitizedDescription = "";

    protected bool isLoggedIn = false;
    protected bool isEditing = false;
    protected bool isVerifying = false;
    protected bool isAdmin = false;

    private bool InitIsDone = false;
    private bool PopulatedOnce = false;

    protected override async Task OnInitializedAsync()
    {
        InitIsDone = false;
        EpisodeClientExtra tempEpisode = await GetEpisode(false);
        if (tempEpisode.ClaimStatus == EpisodeClaimStatus.unverified || tempEpisode.ClaimStatus == EpisodeClaimStatus.not_claimed)
        {
            episode = tempEpisode;
        }
        else
        {
            episode = await GetEpisode(true);
        }
        SanitizeDescription();
        InitIsDone = true;
    }

    protected void SanitizeDescription()
    {
        if (episode == null) return;
        if (episode.Description == null) return;

        // Just to be extremely safe, the description (which contains HTML code), gets sanitized, so it
        // cannot contain any xss exploits.
        HtmlSanitizer sanitizer = new HtmlSanitizer();
        // Replace unrelated API stuff
        string tempDesc = episode.Description.Replace("<br><hr><p>See <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://acast.com/privacy\">acast.com/privacy</a> for privacy and opt-out information.</p>", "");
        tempDesc = tempDesc.Replace("<br><hr><p> See <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://acast.com/privacy\">acast.com/privacy</a> for privacy and opt-out information.</p>", "");
        tempDesc = tempDesc.Replace("&nbsp;<br><hr><p>See <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://acast.com/privacy\">acast.com/privacy</a> for privacy and opt-out information.</p>", "");
        tempDesc = tempDesc.Replace("<hr><p style='color:grey; font-size:0.75em;'> See <a style='color:grey;' target='_blank' rel='noopener noreferrer' href='https://acast.com/privacy'>acast.com/privacy</a> for privacy and opt-out information.</p>", "");
        sanitizedDescription = sanitizer.Sanitize(tempDesc);
    }

    protected async Task PopulateEpisode()
    {
        isLoggedIn = await _session.IsLoggedInAsync();
        if (isLoggedIn)
        {
            UserResponse user = await _session.GetCurrentlyLoggedInUser();
            if (RoleMisc.UserHasElevatedPermission(user.RoleId))
            {
                isAdmin = true;
            }

            isEditing = await _data.IsCurrentlyClaimedEpisode(episode.Id);
            if (isEditing && episode.ClaimStatus == EpisodeClaimStatus.claimed)
            {
                episode = await GetEpisode(true);
                SanitizeDescription();
            }
            if (!episode.Verified && !isEditing && episode.ClaimStatus == EpisodeClaimStatus.unverified)
            {
                if (RoleMisc.UserHasElevatedPermission(user.RoleId))
                {
                    isVerifying = true;
                    episode = await GetEpisode();
                    _refresh.FireRefresh();
                }
            }
        }
        this.StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (InitIsDone && !PopulatedOnce)
        {
            PopulatedOnce = true;
            await PopulateEpisode();
        }
    }

    private async Task<EpisodeClientExtra> GetEpisode(bool claimed = false)
    {
        EpisodeClientExtra tempEpisode = null;
        if (episode != null)
        {
            tempEpisode = episode;
        }
        EpisodeExtendedExtra currentEpisode = null;
        if (claimed || isVerifying)
        {
            currentEpisode = await _data.GetClaimedEpisode(Id);
        }
        else
        {
            currentEpisode = await _data.GetEpisode(Id);
        }

        if (currentEpisode == null && tempEpisode == null)
        {
            throw new InvalidOperationException("Episode does not exist.");
        }
        else if (currentEpisode == null && tempEpisode != null)
        {
            currentEpisode = tempEpisode;
        }
        return new EpisodeClientExtra(currentEpisode);
    }

    protected async Task ClaimEpisode()
    {
        await _data.ClaimEpisode(episode.Id);
        await PopulateEpisode();
    }

    protected async Task FinalizeTopic()
    {
        await _data.FinalizeClaim();
        this.StateHasChanged();
    }

    protected async Task RefreshEpisode()
    {
        await PopulateEpisode();
        this.StateHasChanged();
        _refresh.FireRefresh();
        _toast.ShowSuccess("Refreshed");
    }

    protected async Task VerifyEpisode()
    {
        await _data.VerifyEpisode(episode.Id);
        episode = await GetEpisode(false);
        this.StateHasChanged();
    }

    protected async Task UnverifyEpisode()
    {
        await _data.UnverifyEpisode(episode.Id);
        episode = await GetEpisode(false);
        this.StateHasChanged();
    }

    protected async Task UnclaimEpisode()
    {
        await _data.UnclaimEpisode(episode.Id);
        episode = await GetEpisode(false);
        this.StateHasChanged();
    }

}