@using Themenschaedel.Web.Services.Interfaces
@using Themenschaedel.Shared.Props
@using Sentry
@inject ISession _session
@inject IToastService _toastService
@inject NavigationManager NavigationManager

<div class="search-bar">
    <BlazoredTypeahead SearchMethod="Search" @bind-Value="SearchTerm" ConvertMethod="ConvertSearchResult" placeholder="Search for Topic, Subtopic or Episode...">
        <SelectedTemplate Context="guid">
            @{
                LoadSelectedSearchResult(guid);
            }
        </SelectedTemplate>
        <ResultTemplate Context="searchResult">
            @switch (@searchResult.Type)
            {
                case SearchType.Topic:
                    <div class="search-selected">
                        <div class="item" max-width="150px" max-height="150px" width="150px" height="150px">
                            <img src="@searchResult.Episode.image" max-width="150px" max-height="150px" width="150px" height="150px"/>
                        </div>
                        <div class="item">
                            <p>Episode Name: @searchResult.Episode.title</p>
                            <p>Episode Length: @(searchResult.Episode.duration / 60)m</p>
                        </div>
                        <div class="item">
                            Search find: @searchResult.Topic.name
                        </div>
                    </div>
                    break;
                case SearchType.Subtopic:
                    <div class="search-selected">
                        <div class="item" max-width="150px" max-height="150px" width="150px" height="150px">
                            <img src="@searchResult.Episode.image" max-width="150px" max-height="150px" width="150px" height="150px"/>
                        </div>
                        <div class="item">
                            <p>Episode Name: @searchResult.Episode.title</p>
                            <p>Episode Length: @(searchResult.Episode.duration / 60)m</p>
                        </div>
                        <div class="item">
                            Search find: @searchResult.Subtopic.name
                        </div>
                    </div>
                    break;
                case SearchType.Episode:
                    <div class="search-selected">
                        <div class="item" max-width="150px" max-height="150px" width="150px" height="150px">
                            <img src="@searchResult.Episode.image" max-width="150px" max-height="150px" width="150px" height="150px"/>
                        </div>
                        <div class="item">
                            <p>Episode Name: @searchResult.Episode.title</p>
                            <p>Episode Length: @(searchResult.Episode.duration / 60)m</p>
                        </div>
                        <div class="item">
                            Search find: @searchResult.Episode.title
                        </div>
                    </div>
                    break;
            }
        </ResultTemplate>
        <NotFoundTemplate>
            Sorry, there weren't any search results.
        </NotFoundTemplate>
    </BlazoredTypeahead>
</div>
<div class="user-settings">
    @if (isLoggedIn && CurrentlyLoggedInUser != null)
    {
        <img class="user-img" src="@CurrentlyLoggedInUser.profile_picture" alt="">
        <div class="dropdown">
            <div class="user-name">@CurrentlyLoggedInUser.username</div>
            <i class="ti ti-chevron-down"></i>
            <div class="dropdown-content">
                @*<a href="#">Settings</a>*@
                <a @onclick="Logout">Logout</a>
            </div>
        </div>
        <div class="notify">
            <div class="notification"></div>
            <i class="ti ti-bell icon"></i>
        </div>
    }
    else
    {
        <button class="login-button" @onclick="LoginButtonClick">Login</button>
    }
</div>

@code{

    [Inject]
    private IData _data { get; set; }

    protected bool isLoggedIn = false;

    private ShortUser CurrentlyLoggedInUser = null;

    protected string? SearchTerm { get; set; }

    private List<Search> SearchResult;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoggedIn = await _session.IsLoggedInAsync();
            if (isLoggedIn)
            {
                CurrentlyLoggedInUser = await _session.GetCurrentlyLoggedInUser();
            }
            this.StateHasChanged();
        }
    }

    protected void LoginButtonClick()
    {
        NavigationManager.NavigateTo($"login");
    }

    protected void Logout()
    {
        try
        {
            _session.Logout();
            isLoggedIn = false;
            _toastService.ShowInfo("Logged out.");
        }
        catch (Exception e)
        {
            _toastService.ShowError("Error: unable to log out.");
            SentrySdk.CaptureException(e);
            Console.WriteLine(e);
        }
    }

    private async Task<IEnumerable<Search>> Search(string searchText)
    {
        SearchResult = await _data.Search(searchText);
        return await Task.FromResult(SearchResult);
    }

    private string? ConvertSearchResult(Search search) => search?.UniqueGuid;

    private Search LoadSelectedSearchResult(string? guid)
    {
        int id = SearchResult.FirstOrDefault(x => x.UniqueGuid == guid).Episode.id;
        NavigationManager.NavigateTo($"episode/{id}");
        SearchTerm = null;
        return null;
    }

}