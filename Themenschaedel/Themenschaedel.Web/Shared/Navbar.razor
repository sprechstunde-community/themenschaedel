@using Themenschaedel.Components.Controls
@using Themenschaedel.Shared.Models
@using Themenschaedel.Shared.Models.Response
@using Themenschaedel.Web.Services.Interfaces
@inherits Themenschaedel.Web.Shared.NavbarBase
@inject NavigationManager NavigationManager

<span class="logo">S</span>
<a class="logo-expand" href="/" @onclick="() => HomeClick()">Themenschaedel</a>
<div class="side-wrapper">
    <div class="side-title">MENU</div>
    <div class="side-menu">
        <a class="sidebar-link discover is-active" href="/" @onclick="() => HomeClick()">
            <i class="ti ti-home-2 sidebar-link is-active" fill="currentColor"></i>
            Home
        </a>
    </div>

    <div class="side-menu">
        <a class="sidebar-link discover is-active" href="/Settings" @onclick="() => SettingsClick()">
            <i class="ti ti-settings sidebar-link is-active" fill="currentColor"></i>
            SETTINGS
        </a>
    </div>
    
    @if (isAdmin)
    {
        <div class="side-menu">
            <a class="sidebar-link discover is-active" href="/Settings" @onclick="() => VerifyClick()">
                <i class="ti ti-circle-check sidebar-link is-active" fill="currentColor"></i>
                VERIFY
            </a>
        </div>
    }
</div>
<div class="side-wrapper">
    <div class="side-title">OFF-SITE</div>
    <div class="side-menu">
        <a class="sidebar-link" href="https://plausible.alyra.dev/themenschaedel.alyra.dev/">
            <i fill="currentColor" class="ti ti-file-analytics sidebar-link is-active"></i>
            Auditorium
        </a>

        <div class="quicksettings">
            <p>Themenschaedel</p>
            <p>Pre-Alpha v0.1.0</p>
            @*<SwitchToggle Title="Sentry" IsChecked="@CheckedSentry" OnClick="OnSentryClick"/>*@
        </div>
        @* Brokey:  <SwitchToggle Title="Sentry" />*@
    </div>
</div>


@code{

    [Inject]
    private IUserSession _session { get; set; }

    bool isAdmin = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UserResponse user = await _session.GetCurrentlyLoggedInUser();
            if (user == null) return;
            if (RoleMisc.UserHasElevatedPermission(user.RoleId))
            {
                isAdmin = true;
                this.StateHasChanged();
            }
        }
        
    }

    protected void HomeClick()
    {
        NavigationManager.NavigateTo("/");
    }

    protected void SettingsClick()
    {
        NavigationManager.NavigateTo("/Settings");
    }

    protected void VerifyClick()
    {
        NavigationManager.NavigateTo("/verify");
    }
}